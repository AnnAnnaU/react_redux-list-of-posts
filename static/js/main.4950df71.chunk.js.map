{"version":3,"sources":["store/loading.ts","store/posts.ts","store/errorMessage.ts","store/filterQuery.ts","helpers/api.ts","store/userId.ts","store/index.ts","components/StartButton/StartButton.tsx","components/UserCard/UserCard.tsx","components/RemoveButton/RemoveButton.tsx","components/CommentCard/CommentCard.tsx","components/CommentsList/CommentsList.tsx","components/PostCard/PostCard.tsx","components/PostList/PostList.tsx","components/PostFilter/PostFilter.tsx","helpers/debounce.ts","helpers/users.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["loadingReducer","loading","action","type","loadSuccess","posts","postsReducer","filter","post","id","map","postId","comments","comment","errorReducer","errorMessage","setFilterQuery","filterQuery","filterReducer","getData","url","fetch","then","response","json","getUsersFromServer","a","usersFromServer","preparedUsers","user","console","log","getPostsData","postsFromServer","commentsFromServer","preparedPosts","find","userId","userIdReducer","rootReducer","combineReducers","isLoading","getPosts","state","getLoadingStatus","getErrorMessage","getFilterQuery","getUserId","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","StartButton","dispatch","useDispatch","useSelector","onClick","catch","finally","disabled","UserCard","name","email","address","className","city","street","suite","RemoveButton","size","aria-label","CommentCard","body","removeComment","CommentsList","commentsList","key","PostCard","title","removePost","PostList","PostFilter","updateFilterQuery","useCallback","func","delay","timerId","clearTimeout","args","setTimeout","debounce","query","onChange","event","target","value","trim","arrayOfSelectUsers","UserSelect","index","App","filterPostsByQuery","useMemo","toLowerCase","includes","filterPosts","filterPostsByUserid","filterPostsByUserId","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4950df71.chunk.js","sourcesContent":["import { Action } from 'redux';\r\n// Action types\r\nconst START_LOADING = 'START_LOADING';\r\nconst FINISH_LOADING = 'FINISH_LOADING';\r\n\r\n// Action creators\r\ntype StartLoading = Action<typeof START_LOADING>;\r\ntype FinishLoading = Action<typeof FINISH_LOADING>;\r\ntype LoadingStatus = StartLoading | FinishLoading;\r\n\r\nexport const startLoading = (): StartLoading => ({ type: START_LOADING });\r\nexport const finishLoading = (): FinishLoading => ({ type: FINISH_LOADING });\r\n\r\nconst loadingReducer = (loading = false, action: LoadingStatus) => {\r\n  switch (action.type) {\r\n    case START_LOADING:\r\n      return true;\r\n    case FINISH_LOADING:\r\n      return false;\r\n    default:\r\n      return loading;\r\n  }\r\n};\r\n\r\nexport default loadingReducer;\r\n","import { Action } from 'redux';\n\nconst LOAD_SUCCESS = 'LOAD_SUCCESS';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\ntype LoadSuccess = Action<typeof LOAD_SUCCESS> & { posts: PreparedPost[] };\ntype RemovePost = Action<typeof REMOVE_POST> & { id: number };\ntype RemoveComment = Action<typeof REMOVE_COMMENT> & { id: number; postId: number };\n\nexport const loadSuccess = (posts: PreparedPost[]): LoadSuccess => ({\n  type: LOAD_SUCCESS,\n  posts,\n});\n\n\nexport const removePost = (id: number): RemovePost => ({\n  type: REMOVE_POST,\n  id,\n});\n\nexport const removeComment = (id: number, postId: number): RemoveComment => ({\n  type: REMOVE_COMMENT,\n  id,\n  postId,\n});\n\ntype PostAction = LoadSuccess | RemovePost | RemoveComment;\n\nconst postsReducer = (posts = [] as PreparedPost[], action: PostAction) => {\n  switch (action.type) {\n    case LOAD_SUCCESS:\n      return action.posts;\n\n    case REMOVE_POST:\n      return posts.filter(post => post.id !== action.id);\n\n    case REMOVE_COMMENT:\n      return posts.map(post => ((post.id === action.postId) ? {\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== action.id),\n      } : post));\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;","import { Action } from 'redux';\n\nconst LOAD_ERROR = 'LOAD_ERROR';\n\ntype LoadError = Action<typeof LOAD_ERROR> & { errorMessage: string };\n\nexport const loadError = (errorMessage: string): LoadError => ({\n  type: LOAD_ERROR,\n  errorMessage,\n});\n\nconst errorReducer = (errorMessage = '', action: LoadError) => {\n  switch (action.type) {\n    case LOAD_ERROR:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default errorReducer;","import { Action } from 'redux';\n\nconst FILTER_QUERY = 'FILTER_QUERY';\n\ntype FilterQuery = Action<typeof FILTER_QUERY> & { filterQuery: string };\n\nexport const setFilterQuery = (filterQuery: string): FilterQuery => ({\n  type: FILTER_QUERY,\n  filterQuery,\n});\n\nconst filterReducer = (filterQuery = '', action: FilterQuery) => {\n  switch (action.type) {\n    case FILTER_QUERY:\n      return action.filterQuery;\n\n    default:\n      return filterQuery;\n  }\n};\n\nexport default filterReducer;","const API_URL = 'https://jsonplaceholder.typicode.com';\r\n\r\nconst USERS_PATH = '/users';\r\nconst POSTS_PATH = '/posts';\r\nconst COMMENTS_PATH = '/comments';\r\n\r\nconst getData = <T>(url: string): Promise<T[]> => {\r\n  return fetch(API_URL + url)\r\n    .then(response => response.json());\r\n};\r\n\r\nexport const getUsersFromServer = async (): Promise<PreparedUsers[]> => {\r\n  const usersFromServer = await getData<User>(USERS_PATH);\r\n  const preparedUsers = usersFromServer.map((user: User) => ({\r\n    ...user\r\n  }));\r\n\r\n  return preparedUsers;\r\n}\r\n\r\nconsole.log(getUsersFromServer());\r\n\r\nexport const getPostsData = async (): Promise<PreparedPost[]> => {\r\n  const usersFromServer = await getData<User>(USERS_PATH);\r\n  const postsFromServer = await getData<Post>(POSTS_PATH);\r\n  const commentsFromServer = await getData<Comment>(COMMENTS_PATH);\r\n\r\n  const preparedPosts = postsFromServer.map((post: Post) => ({\r\n    ...post,\r\n    user: usersFromServer.find((user: User) => user.id === post.userId),\r\n    comments: commentsFromServer.filter((comment: Comment) => comment.postId === post.id),\r\n  }));\r\n\r\n  return preparedPosts;\r\n};\r\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_USER_ID = 'CHOOSE_USER_ID';\n\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId });\n\nconst userIdReducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default userIdReducer;","import { Dispatch } from 'react';\r\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nimport loadingReducer, { finishLoading, startLoading } from './loading';\r\nimport postsReducer, { loadSuccess } from './posts';\r\nimport errorReducer, { loadError } from './errorMessage';\r\nimport filterReducer from './filterQuery';\r\nimport { getPostsData } from '../helpers/api';\r\nimport userIdReducer from './userId';\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  isLoading: loadingReducer,\r\n  errorMessage: errorReducer,\r\n  filterQuery: filterReducer,\r\n  userId: userIdReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const getPosts = (state: RootState) => state.posts;\r\nexport const getLoadingStatus = (state: RootState) => state.isLoading;\r\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\r\nexport const getFilterQuery = (state: RootState) => state.filterQuery;\r\nexport const getUserId = (state: RootState) => state.userId;\r\n\r\nexport const loadPosts = () => {\r\n  return async (dispatch: Dispatch<any>) => {\r\n    dispatch(startLoading());\r\n    return getPostsData()\r\n      .then(posts => dispatch(loadSuccess(posts)))\r\n      .catch(() => dispatch(loadError('Error occurred when loading data')))\r\n      .finally(() => dispatch(finishLoading()));\r\n  };\r\n};\r\n\r\nconst initialState: RootState = {\r\n  posts: [],\r\n  isLoading: false,\r\n  errorMessage: '',\r\n  filterQuery: '',\r\n  userId: '',\r\n};\r\n\r\nconst store: any = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(ReduxThunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getLoadingStatus, loadPosts } from '../../store';\n\nexport const StartButton = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoadingStatus);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch(loadPosts())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};","import React from 'react';\nimport './UserCard.css';\n\ntype Props = User;\n\nexport const UserCard: React.FC<Props> = ({ name, email, address }) => (\n  <div className=\"post__autor user\">\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Autor: </span>\n      {name}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Email: </span>\n      {email}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Address: </span>\n      {address.city}\n      ,\n      {' '}\n      {address.street}\n      ,\n      {' '}\n      {address.suite}\n    </div>\n  </div>\n);","import React from 'react';\n\nimport './RemoveButton.css';\n\ntype Props = {\n  size: string;\n  onClick: () => void;\n};\n\nexport const RemoveButton: React.FC<Props> = ({ onClick, size }) => (\n  <button\n    className={`remove-btn remove-btn--${size}`}\n    type=\"button\"\n    onClick={onClick}\n    aria-label=\"remove button\"\n  />\n);","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './CommentCard.css';\nimport { RemoveButton } from '../RemoveButton/RemoveButton';\nimport { removeComment } from '../../store/posts';\n\ntype Props = Comment;\n\nexport const CommentCard: React.FC<Props> = ({\n  name, body, email, id, postId,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"post__comment comment\">\n      <div className=\"comment__header\">\n        <h3 className=\"comment__title\">\n          {name}\n        </h3>\n        <RemoveButton\n          size=\"small\"\n          onClick={() => dispatch(removeComment(id, postId))}\n        />\n      </div>\n      <p className=\"comment__text\">\n        {body}\n      </p>\n      <span className=\"comment__email\">\n        {email}\n      </span>\n    </li>\n  );\n};","import React from 'react';\n\nimport { CommentCard } from '../CommentCard/CommentCard';\n\ntype Props = {\n  commentsList: Comment[];\n};\n\nexport const CommentsList: React.FC<Props> = ({ commentsList }) => (\n  <ol>\n    {commentsList.map((comment: Comment) => (\n      <CommentCard {...comment} key={comment.id} />\n    ))}\n  </ol>\n);","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './PostCard.css';\nimport { UserCard } from '../UserCard/UserCard';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport { RemoveButton } from '../RemoveButton/RemoveButton';\nimport { removePost } from '../../store/posts';\n\n\ntype Props = PreparedPost;\n\nexport const PostCard: React.FC<Props> = ({\n  title,\n  body,\n  user,\n  comments,\n  id,\n}) => {\n\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\"post-list__post post\">\n      <div className=\"post__header\">\n        <h2 className=\"post__title\">{title}</h2>\n        <RemoveButton size=\"large\" onClick={() => dispatch(removePost(id))} />\n      </div>\n      <p className=\"post__text\">{body}</p>\n      {user && <UserCard {...user} key={user.id} />}\n      {comments && <CommentsList commentsList={comments} />}\n    </li>\n  );\n};","import React from 'react';\nimport { PostCard } from '../PostCard/PostCard';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => (\n  <ol>\n    {posts.map((post: PreparedPost) => (\n      <PostCard {...post} key={post.id} />\n    ))}\n  </ol>\n);","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './PostFilter.css';\nimport { setFilterQuery } from '../../store/filterQuery';\nimport { getFilterQuery } from '../../store';\nimport { debounce } from '../../helpers/debounce';\n\n\nexport const filterPosts = (filterQuery: string, posts: PreparedPost[]) => (\n  posts.filter(({ title, body }) => (title + body)\n    .toLowerCase().includes(filterQuery.toLowerCase()))\n);\n\nexport const PostFilter = () => {\n  const dispatch = useDispatch();\n  const filterQuery = useSelector(getFilterQuery);\n\n  const updateFilterQuery = useCallback(\n    debounce(\n      (query: string) => {\n        dispatch(setFilterQuery(query));\n      }, 1000,\n    ), [filterQuery],\n  );\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateFilterQuery(event.target.value.trim());\n  };\n\n  const resetFilter = () => {\n    dispatch(setFilterQuery(''));\n  };\n\n  return (\n    <div className=\"post-list__filter\">\n      <input\n        type=\"textarea\"\n        className=\"post-list__filter-input\"\n        onChange={handleFilterChange}\n      />\n      <button\n        className=\"post-list__reset\"\n        type=\"button\"\n        onClick={resetFilter}\n      >\n        Reset\n      </button>\n    </div>\n  );\n};","export const debounce = <F extends (...args: any[]) => void>(\n  func: F,\n  delay: number,\n) => {\n  let timerId: any;\n\n  return (...args: any[]) => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(func, delay, ...args);\n  };\n};","export const arrayOfSelectUsers = [\n  'All autors',\n  'Leanne Graham',\n  'Ervin Howell',\n  'Clementine Bauch',\n  'Patricia Lebsack',\n  'Chelsey Dietrich',\n  'Mrs. Dennis Schulist',\n  'Kurtis Weissnat',\n  'Nicholas Runolfsdottir V',\n  'Glenna Reichert',\n  'Leanne Graham',\n]","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { arrayOfSelectUsers } from '../../helpers/users';\nimport { chooseUserId } from '../../store/userId';\n\nimport './UserSelect.css';\n\nexport const filterPostsByUserId = (userId: number, posts: PreparedPost[]) => (\n  posts.filter(post => post.userId === userId)\n);\n\nexport const UserSelect = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"user-label\">\n      Select autor: &nbsp;\n\n      <select\n        className=\"user-selector\"\n        onChange={event => dispatch(chooseUserId(+event.target.value))}\n      >\n        {arrayOfSelectUsers.map((user, index) => (\n          <option\n            key={index}\n            value={index}\n          >\n            {user}\n          </option>\n        ))}\n      </select>\n    </label>\n  )\n};","import React, { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport './App.css';\r\nimport { StartButton } from './components/StartButton/StartButton';\r\nimport { PostList } from './components/PostList/PostList';\r\nimport { PostFilter, filterPosts } from './components/PostFilter/PostFilter';\r\nimport { getErrorMessage, getPosts, getFilterQuery, getUserId } from './store';\r\nimport { UserSelect } from './components/UserSelect/UserSelect';\r\nimport { filterPostsByUserId } from './components/UserSelect/UserSelect';\r\n\r\nconst App = () => {\r\n  const errorMessage = useSelector(getErrorMessage);\r\n  const posts = useSelector(getPosts);\r\n  const filterQuery = useSelector(getFilterQuery);\r\n  const userId = useSelector(getUserId);\r\n\r\n  const filterPostsByQuery = useMemo(() => filterPosts(filterQuery, posts), [\r\n    filterQuery,\r\n    posts,\r\n  ]);\r\n\r\n\r\n  const filterPostsByUserid = useMemo(() => filterPostsByUserId(userId, posts), [\r\n    userId,\r\n    posts,\r\n  ])\r\n\r\n  const visiblePosts = (): PreparedPost[] => {\r\n    if (filterQuery) {\r\n      return filterPostsByQuery;\r\n    } else if (userId) {\r\n      return filterPostsByUserid;\r\n    } else {\r\n      return posts;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h1 className=\"post-list__title\">Posts:</h1>\r\n      {posts.length === 0 ? (\r\n        <>\r\n          <StartButton />\r\n          {errorMessage && (<p>{errorMessage}</p>)}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"post-list__filters\">\r\n            <PostFilter />\r\n            <UserSelect />\r\n          </div>\r\n          <PostList posts={visiblePosts()}\r\n          />\r\n        </>\r\n      )\r\n      }\r\n    </section >\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}